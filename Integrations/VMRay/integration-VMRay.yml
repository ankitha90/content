category: Forensics & Malware Analysis
commonfields:
  id: vmray2
  version: -1
configuration:
- defaultvalue: https://cloud.vmray.com
  display: Server URL (e.g. https://192.168.0.1)
  name: server
  required: true
  type: 0
- display: API Key
  name: api_key
  required: true
  type: 4
- display: Use system proxy
  name: proxy
  required: false
  type: 8
- display: Trust any certificate (unsecure)
  name: insecure
  required: false
  type: 8
description: Ransomware analysis sandboxing
display: VMRay2
name: vmray2
script:
  commands:
  - arguments:
    - default: false
      description: Entry id  of file to submit
      isArray: false
      name: entry_id
      required: true
      secret: false
    - default: false
      description: Password of the document
      isArray: false
      name: document_password
      required: false
      secret: false
    - default: false
      description: password of an archive
      isArray: false
      name: archive_password
      required: false
      secret: false
    - default: false
      description: Force type of file
      isArray: false
      name: sample_type
      required: false
      secret: false
    - auto: PREDEFINED
      default: false
      description: Make the file shareable
      isArray: false
      name: shareable
      predefined:
      - 'true'
      - 'false'
      required: false
      secret: false
    - auto: PREDEFINED
      default: false
      description: Analyze no matter if analyses already exist
      isArray: false
      name: reanalyze
      predefined:
      - 'true'
      - 'false'
      required: false
      secret: false
    - default: false
      description: Maximum jobs to be created (number)
      isArray: false
      name: max_jobs
      required: false
      secret: false
    - default: false
      description: Tags to add to sample (comma seperated)
      isArray: false
      name: tags
      required: false
      secret: false
    deprecated: false
    description: Submit sample to VMRay
    execution: false
    name: vmray-upload-sample
    outputs:
    - contextPath: VMRay.Job.JobID
      description: ID of a new job
      type: Number
    - contextPath: VMRay.Job.Created
      description: Timestamp of created job
      type: Date
    - contextPath: VMRay.Job.SampleID
      description: ID of sample
      type: Number
    - contextPath: VMRay.Job.VMName
      description: Name of virtual machine
      type: String
    - contextPath: VMRay.Job.VMID
      description: ID of virtual machine
      type: Number
    - contextPath: VMRay.Sample.SampleID
      description: ID of sample
      type: Number
    - contextPath: VMRay.Sample.Created
      description: Timestamp of created sample
      type: Date
    - contextPath: VMRay.Submission.SubmissionID
      description: Submission ID
      type: Number
  - arguments:
    - default: false
      description: Analysis sample ID
      isArray: false
      name: sample_id
      required: true
      secret: false
    - default: false
      description: Limits results (number)
      isArray: false
      name: limit
      required: false
      secret: false
    deprecated: false
    description: Get all analysis details about a specific sample.
    execution: false
    name: vmray-get-analysis-by-sample
    outputs:
    - contextPath: VMRay.Analysis.AnalysisID
      description: ID of analysis
      type: Number
    - contextPath: VMRay.Analysis.SampleID
      description: Sample ID in analysis
      type: Number
    - contextPath: VMRay.Analysis.Severity
      description: Severity of sample (Malicious, Suspicious, Good, Blacklisted, Whitelested,
        Unknown)
      type: String
    - contextPath: VMRay.Analysis.JobCreated
      description: Analysis job started
      type: Date
    - contextPath: VMRay.Analysis.MD5
      description: MD5 of sample
      type: String
    - contextPath: VMRay.Analysis.SHA1
      description: SHA1 of sample
      type: String
    - contextPath: VMRay.Analysis.SHA256
      description: SHA256 of sample
      type: String
    - contextPath: VMRay.Analysis.SSDeep
      description: SSDeep of sample
      type: String
  - arguments:
    - default: false
      description: Job sample id
      isArray: false
      name: sample_id
      required: true
      secret: false
    deprecated: false
    description: Get all jobs details about a specific sample.
    execution: false
    name: vmray-get-job-by-sample
    outputs:
    - contextPath: VMRay.Job.JobID
      description: ID of job
      type: Number
    - contextPath: VMRay.Job.SampleID
      description: Sample ID of job
      type: Number
    - contextPath: VMRay.Job.SubmissionID
      description: ID of submission
      type: Number
    - contextPath: VMRay.Job.MD5
      description: MD5 of sample in job
      type: String
    - contextPath: VMRay.Job.SHA1
      description: SHA1 of sample in job
      type: String
    - contextPath: VMRay.Job.SHA256
      description: SHA256 of sample in job
      type: String
    - contextPath: VMRay.Job.SSDeep
      description: SSDeep of sample in job
      type: String
    - contextPath: VMRay.Job.VMName
      description: Name of virtual machine
      type: String
    - contextPath: VMRay.Job.VMID
      description: ID of virtual machine
      type: Number
    - contextPath: VMRay.Job.Status
      description: 'Status of job. '
      type: String
  - arguments:
    - default: false
      description: ID of submission (can be aquired from vmray-upload-sample)
      isArray: false
      name: submission_id
      required: true
      secret: false
    deprecated: false
    description: Gets a submission result
    execution: false
    name: vmray-get-submission
    outputs:
    - contextPath: VMRay.Submission.IsFinished
      description: Status of submission (true or false)
      type: Boolean
    - contextPath: VMRay.Submission.HasErrors
      description: If there are any errors in the submission
      type: Boolean
    - contextPath: VMRay.Submission.SubmissionID
      description: ID of of sample in submission
      type: Number
    - contextPath: VMRay.Submission.MD5
      description: MD5 of of sample in submission
      type: String
    - contextPath: VMRay.Submission.SHA1
      description: SHA1 of of sample in submission
      type: String
    - contextPath: VMRay.Submission.SHA256
      description: SHA256 of of sample in submission
      type: String
    - contextPath: VMRay.Submission.SSDeep
      description: SSDeep of of sample in submission
      type: String
    - contextPath: VMRay.Submission.Severity
      description: Severity of sample in submission (Malicious, Suspicious, Good,
        Blacklisted, Whitelested, Unknown)
      type: String
    - contextPath: VMRay.Submission.SampleID
      description: ID of sample in submission
      type: Number
  - arguments:
    - default: false
      description: 'id of sample '
      isArray: false
      name: sample_id
      required: true
      secret: false
    deprecated: false
    description: get sample by sample id
    execution: false
    name: vmray-get-sample
    outputs:
    - contextPath: VMRay.Sample.SampleID
      description: ID of sample
      type: Number
    - contextPath: VMRay.Sample.FileName
      description: File name of sample
      type: String
    - contextPath: VMRay.Sample.MD5
      description: MD5 of sample
      type: String
    - contextPath: VMRay.Sample.SHA1
      description: SHA1 of sample
      type: String
    - contextPath: VMRay.Sample.SHA256
      description: SHA256 of sample
      type: String
    - contextPath: VMRay.Sample.SSDeep
      description: SSDeep of sample
      type: String
    - contextPath: VMRay.Sample.Severity
      description: Severity of sample in submission (Malicious, Suspicious, Good,
        Blacklisted, Whitelested, Unknown)
      type: String
    - contextPath: VMRay.Sample.Type
      description: File type
      type: String
    - contextPath: VMRay.Sample.Created
      description: timestamp of created sample
      type: Date
    - contextPath: VMRay.Sample.Classifications
      description: Classifications of sample
      type: String
  - arguments:
    - default: false
      description: ID of sample (can get from VMRay.Sample.ID)
      isArray: false
      name: sample_id
      required: true
      secret: false
    deprecated: false
    description: Get threat indicators (VTI)
    execution: false
    name: vmray-get-threat-indicators
    outputs:
    - contextPath: VMRay.ThreatIndicator.AnalysisID
      description: List of connected analyses ids
      type: Number
    - contextPath: VMRay.ThreatIndicator.Category
      description: Category of threat indicators
      type: String
    - contextPath: VMRay.ThreatIndicator.Classification
      description: Classifications of threat indicators
      type: String
    - contextPath: VMRay.ThreatIndicator.ID
      description: ID of threat indicator
      type: Number
    - contextPath: VMRay.ThreatIndicator.Operation
      description: Operation the indicators caused
      type: String
  - arguments:
    - default: false
      description: ID of submission to add tag to
      isArray: false
      name: submission_id
      required: false
      secret: false
    - default: false
      description: ID of analysis to delete tag from
      isArray: false
      name: analysis_id
      required: false
      secret: false
    - default: false
      description: Tag to add
      isArray: false
      name: tag
      required: false
      secret: false
    deprecated: false
    description: Adds a tag to analysis and/or submission
    execution: false
    name: vmray-add-tag
  - arguments:
    - default: false
      description: ID of analysis to delete tag from
      isArray: false
      name: analysis_id
      required: false
      secret: false
    - default: false
      description: ID of submission to delete tag from
      isArray: false
      name: submission_id
      required: false
      secret: false
    - default: false
      description: Tag to delete
      isArray: false
      name: tag
      required: false
      secret: false
    deprecated: false
    description: Delete tags from analysis and/or submission
    execution: false
    name: vmray-delete-tag
  - arguments:
    - default: false
      description: if of sample
      isArray: false
      name: sample_id
      required: true
      secret: false
    deprecated: false
    description: getting iocs of given sample
    execution: false
    name: vmray-get-iocs
    outputs:
    - contextPath: VMRay.Sample.IOC.URL.AnalysisID
      description: IDs of other analyses conatining given URL
      type: Number
    - contextPath: VMRay.Sample.IOC.URL.URL
      description: URL
      type: String
    - contextPath: VMRay.Sample.IOC.URL.Operation
      description: Operation of given url
      type: String
    - contextPath: VMRay.Sample.IOC.URL.ID
      description: ID of URL
      type: Number
    - contextPath: VMRay.Sample.IOC.URL.Type
      description: Type of url
      type: String
    - contextPath: VMRay.Sample.IOC.Domain.AnalysisID
      description: IDs of other analyses conatining given Domain
      type: Number
    - contextPath: VMRay.Sample.IOC.Domain.Domain
      description: Domain
      type: String
    - contextPath: VMRay.Sample.IOC.Domain.ID
      description: ID of domain
      type: Number
    - contextPath: VMRay.Sample.IOC.Domain.Type
      description: Type of domain
      type: String
    - contextPath: VMRay.Sample.IOC.IP.AnalysisID
      description: IDs of other analyses conatining given IP
      type: Number
    - contextPath: VMRay.Sample.IOC.IP.IP
      description: IP
      type: String
    - contextPath: VMRay.Sample.IOC.IP.Operation
      description: Operation of given IP
      type: String
    - contextPath: VMRay.Sample.IOC.IP.ID
      description: ID of IP
      type: Number
    - contextPath: VMRay.Sample.IOC.IP.Type
      description: Type of IP
      type: String
    - contextPath: VMRay.Sample.IOC.Mutex.AnalysisID
      description: IDs of other analyses conatining given IP
      type: Number
    - contextPath: VMRay.Sample.IOC.Mutex.Name
      description: Name of mutex
      type: String
    - contextPath: VMRay.Sample.IOC.Mutex.Operation
      description: Operation of given mutex
      type: String
    - contextPath: VMRay.Sample.IOC.Mutex.ID
      description: ID of mutex
      type: Number
    - contextPath: VMRay.Sample.IOC.Mutex.Type
      description: Type of mutex
      type: String
  - arguments:
    - default: false
      description: if of a job
      isArray: false
      name: job_id
      required: true
      secret: false
    deprecated: false
    description: Get job by id
    execution: false
    name: vmray-get-job-by-id
    outputs:
    - contextPath: VMRay.Job.JobID
      description: ID of job
      type: Number
    - contextPath: VMRay.Job.SampleID
      description: Sample ID of job
      type: Number
    - contextPath: VMRay.Job.SubmissionID
      description: ID of submission
      type: Number
    - contextPath: VMRay.Job.MD5
      description: MD5 of sample in job
      type: String
    - contextPath: VMRay.Job.SHA1
      description: SHA1 of sample in job
      type: String
    - contextPath: VMRay.Job.SHA256
      description: SHA256 of sample in job
      type: String
    - contextPath: VMRay.Job.SSDeep
      description: SSDeep of sample in job
      type: String
    - contextPath: VMRay.Job.VMName
      description: Name of virtual machine
      type: String
    - contextPath: VMRay.Job.VMID
      description: ID of virtual machine
      type: Number
    - contextPath: VMRay.Job.Status
      description: Status of job
      type: String
  dockerimage: demisto/python
  isfetch: false
  runonce: false
  script: "import requests\n\n\n\n\"\"\" GLOBAL PARAMS \"\"\"\nAPI_KEY = demisto.params()[\"\
    api_key\"]\nSERVER = (\n    demisto.params()[\"server\"][:-1]\n    if (demisto.params()[\"\
    server\"] and demisto.params()[\"server\"].endswith(\"/\"))\n    else demisto.params()[\"\
    server\"]\n)\n\nSERVER += \"/rest/\"\nUSE_SSL = not demisto.params().get(\"insecure\"\
    , False)\nHEADERS = {\"Authorization\": \"api_key \" + API_KEY}\n\n# Remove proxy\n\
    if not demisto.params().get(\"proxy\"):\n    del os.environ[\"HTTP_PROXY\"]\n\
    \    del os.environ[\"HTTPS_PROXY\"]\n    del os.environ[\"http_proxy\"]\n   \
    \ del os.environ[\"https_proxy\"]\n\n\"\"\" HELPER DICTS \"\"\"\nSEVERITY_DICT\
    \ = {\n    \"malicious\": \"Malicious\",\n    \"suspicious\": \"Suspicious\",\n\
    \    \"not_suspicious\": \"Good\",\n    \"blacklisted\": \"Blacklisted\",\n  \
    \  \"whitelisted\": \"Whitelisted\",\n    \"unknown\": \"Unknown\",\n    None:\
    \ \"Unknown\"\n}\n\nDBOTSCORE = {\n    \"Malicious\": 3,\n    \"Suspicious\":\
    \ 2,\n    \"Good\": 1,\n    \"Blacklisted\": 3,\n    \"Whitelisted\": 1,\n   \
    \ \"Unknown\": 0,\n}\n\n\"\"\" HELPER FUNCTIONS \"\"\"\n\n\ndef build_errors_string(errors):\n\
    \    if isinstance(errors, list):\n        err_str = str()\n        for error\
    \ in errors:\n            err_str += error.get(\"error_msg\") + \".\\n\"\n   \
    \ else:\n        err_str = errors.get(\"error_msg\")\n    return err_str\n\n\n\
    def http_request(method, url_suffix, params=None, files=None, ignore_errors=False):\n\
    \    def find_error(may_be_error_inside):\n        \"\"\"Function will search\
    \ for dict with \"errors\" or \"error_msg\" key\n\n        Args:\n           \
    \ may_be_error_inside: object, any object\n\n        Returns:\n            None\
    \ if no error presents\n            Errors list/string if errors inside.\n   \
    \     \"\"\"\n        if isinstance(may_be_error_inside, list):\n            for\
    \ obj in may_be_error_inside:\n                ans = find_error(obj)\n       \
    \         if ans:\n                    return ans\n            return None\n \
    \       if isinstance(may_be_error_inside, dict):\n            if \"error_msg\"\
    \ in may_be_error_inside:\n                return may_be_error_inside[\"error_msg\"\
    ]\n            if \"errors\" in may_be_error_inside and len(may_be_error_inside[\"\
    errors\"]):\n                return may_be_error_inside[\"errors\"]\n        \
    \    for v in may_be_error_inside.values():\n                err = find_error(v)\n\
    \                if err:\n                    return err\n        return None\n\
    \n    \"\"\" General HTTP request.\n    Args:\n        ignore_error:\n       \
    \ method: (str) \"GET\", \"POST\", \"DELETE' \"PUT\"\n        url_suffix: (str)\n\
    \        params: (dict)\n        files: (tuple, dict)\n\n    Returns:\n      \
    \  dict: response json\n    \"\"\"\n    error_format = \"Error in API call to\
    \ VMRay [{}] - {}\"\n    url = SERVER + url_suffix\n    r = requests.request(\n\
    \        method,\n        url,\n        params=params,\n        headers=HEADERS,\n\
    \        files=files,\n        verify=USE_SSL,\n    )\n\n    status_code = r.status_code\n\
    \    # Handle errors\n    try:\n        if status_code not in {200, 201, 202,\
    \ 204} and not ignore_errors:\n            raise ValueError\n\n        response\
    \ = r.json()\n        err = find_error(response)\n        if err:\n          \
    \  return_error(error_format.format(status_code, err))\n        return response\n\
    \    except ValueError:\n        # If no JSON is present, must be an error that\
    \ can't be ignored\n        return_error(\n            error_format.format(status_code,\
    \ r.text)\n        )\n\n\ndef score_by_hash(analysis):\n    \"\"\"Gets a dict\
    \ containing MD5/SHA1/SHA256/SSDeep and return dbotscore\n\n    Args:\n      \
    \  analysis: (dict)\n\n    Returns:\n        dict: dbot score\n    \"\"\"\n  \
    \  hashes = [\"MD5\", \"SHA256\", \"SHA1\", \"SSDeep\"]\n    scores = list()\n\
    \    for hash_type in hashes:\n        if hash_type in analysis:\n           \
    \ scores.append(\n                {\n                    \"Indicator\": analysis.get(hash_type),\n\
    \                    \"Type\": \"hash\",\n                    \"Vendor\": \"VMRay\"\
    ,\n                    \"Score\": DBOTSCORE.get(analysis.get(\"Severity\", 0)),\n\
    \                }\n            )\n    return scores\n\n\ndef build_job_data(data):\n\
    \    def build_entry(entry_data):\n        entry = dict()\n        entry[\"JobID\"\
    ] = entry_data.get(\"job_id\")\n        entry[\"SampleID\"] = entry_data.get(\"\
    job_sample_id\")\n        entry[\"SubmissionID\"] = entry_data.get(\"job_submission_id\"\
    )\n        entry[\"MD5\"] = entry_data.get(\"job_sample_md5\")\n        entry[\"\
    SHA1\"] = entry_data.get(\"job_sample_sha1\")\n        entry[\"SHA256\"] = entry_data.get(\"\
    job_sample_sha256\")\n        entry[\"SSDeep\"] = entry_data.get(\"job_sample_ssdeep\"\
    )\n        entry[\"VMName\"] = entry_data.get(\"job_vm_name\")\n        entry[\"\
    VMID\"] = entry_data.get(\"job_vm_id\")\n        entry[\"Status\"] = entry_data.get(\"\
    job_status\")\n        return entry\n\n    jobs_list = list()\n    if isinstance(data,\
    \ list):\n        for item in data:\n            jobs_list.append(build_entry(item))\n\
    \    elif isinstance(data, dict):\n        jobs_list = build_entry(data)\n   \
    \ return jobs_list\n\n\ndef build_finished_job(job_id, sample_id):\n    entry\
    \ = dict()\n    entry[\"JobID\"] = job_id\n    entry[\"SampleID\"] = sample_id\n\
    \    entry[\"Status\"] = \"Finished/NotExists\"\n    return entry\n\n\ndef build_analysis_data(analyses):\n\
    \    \"\"\"\n\n    Args:\n        analyses: (dict) of analysis\n\n    Returns:\n\
    \        dict: formatted entry context\n    \"\"\"\n    entry_context = dict()\n\
    \    entry_context[\"VMRay.Analysis(val.AnalysisID === obj.AnalysisID)\"] = [\n\
    \        {\n            \"AnalysisID\": analysis.get(\"analysis_id\"),\n     \
    \       \"SampleID\": analysis.get(\"analysis_sample_id\"),\n            \"Severity\"\
    : SEVERITY_DICT.get(analysis.get(\"analysis_severity\")),\n            \"JobCreated\"\
    : analysis.get(\"analysis_job_started\"),\n            \"SHA1\": analysis.get(\"\
    analysis_sample_sha1\"),\n            \"MD5\": analysis.get(\"analysis_sample_md5\"\
    ),\n            \"SHA256\": analysis.get(\"analysis_sample_sha25\"),\n       \
    \ }\n        for analysis in analyses\n    ]\n\n    scores = list()\n    for analysis\
    \ in entry_context:\n        scores.extend(score_by_hash(analysis))\n    entry_context[outputPaths.get(\"\
    dbotscore\")] = scores\n\n    return entry_context\n\n\ndef test_module():\n \
    \   \"\"\"Simple get request to see if connected\n    \"\"\"\n    response = http_request(\"\
    GET\", \"analysis?_limit=1\")\n    demisto.results(\"ok\") if response.get(\"\
    result\") == 'ok' else return_error(\"Can't authenticate! {}\".format(response))\n\
    \n\ndef upload_sample(path, params=None):\n    suffix = \"sample/submit\"\n  \
    \  files = {\"sample_file\": open(path, \"rb\")}\n    results = http_request(\"\
    POST\", url_suffix=suffix, params=params, files=files)\n    return results\n\n\
    \ndef upload_sample_command():\n    \"\"\"Uploads a file to vmray\n    \"\"\"\n\
    \    # Preserve BC\n    file_id = demisto.args().get(\"entry_id\") if demisto.args().get(\"\
    entry_id\") else demisto.args().get(\"file_id\")\n    path = demisto.getFilePath(file_id).get(\"\
    path\")\n\n    # additional params\n    doc_pass = demisto.args().get(\"document_password\"\
    )\n    arch_pass = demisto.args().get(\"archive_password\")\n    sample_type =\
    \ demisto.args().get(\"sample_type\")\n    shareable = demisto.args().get(\"shareable\"\
    )\n    reanalyze = demisto.args().get(\"reanalyze\")\n    max_jobs = demisto.args().get(\"\
    max_jobs\")\n    tags = demisto.args().get(\"tags\")\n\n    params = dict()\n\
    \    if doc_pass:\n        params[\"document_password\"] = doc_pass\n    if arch_pass:\n\
    \        params[\"archive_password\"] = arch_pass\n    if sample_type:\n     \
    \   params[\"sample_type\"] = sample_type\n    if shareable == \"true\":\n   \
    \     params[\"shareable\"] = shareable\n    if reanalyze == \"true\":\n     \
    \   params[\"reanalyze\"] = reanalyze\n    if max_jobs:\n        if max_jobs.isdigit():\n\
    \            params[\"max_jobs\"] = int(max_jobs)\n        else:\n           \
    \ return_error(\"max_jobs arguments isn't a number\")\n    if tags:\n        params[\"\
    tags\"] = tags\n\n    # Request call\n    raw_response = upload_sample(path, params=params)\n\
    \    data = raw_response.get(\"data\")\n    jobs_list = list()\n    jobs = data.get(\"\
    jobs\")\n    if jobs:\n        for job in jobs:\n            if isinstance(job,\
    \ dict):\n                job_entry = dict()\n                job_entry[\"JobID\"\
    ] = job.get(\"job_id\")\n                job_entry[\"Created\"] = job.get(\"job_created\"\
    )\n                job_entry[\"SampleID\"] = job.get(\"job_sample_id\")\n    \
    \            job_entry[\"VMName\"] = job.get(\"job_vm_name\")\n              \
    \  job_entry[\"VMID\"] = job.get(\"job_vm_id\")\n                job_entry[\"\
    JobRuleSampleType\"] = job.get(\"job_jobrule_sampletype\")\n                jobs_list.append(job_entry)\n\
    \n    samples_list = list()\n    samples = data.get(\"samples\")\n    if samples:\n\
    \        for sample in samples:\n            if isinstance(sample, dict):\n  \
    \              sample_entry = dict()\n                sample_entry[\"SampleID\"\
    ] = sample.get(\"sample_id\")\n                sample_entry[\"Created\"] = sample.get(\"\
    sample_created\")\n                sample_entry[\"FileName\"] = sample.get(\"\
    submission_filename\")\n                sample_entry[\"FileSize\"] = sample.get(\"\
    sample_filesize\")\n                sample_entry[\"SSDeep\"] = sample.get(\"sample_ssdeephash\"\
    )\n                sample_entry[\"SHA1\"] = sample.get(\"sample_sha1hash\")\n\
    \                samples_list.append(sample_entry)\n\n    submissions_list = list()\n\
    \    submissions = data.get(\"submissions\")\n    if submissions:\n        for\
    \ submission in submissions:\n            if isinstance(submission, dict):\n \
    \               submission_entry = dict()\n                submission_entry[\"\
    SubmissionID\"] = submission.get(\"submission_id\")\n                submission_entry[\"\
    SampleID\"] = submission.get(\"submission_sample_id\")\n                submissions_list.append(submission_entry)\n\
    \n    entry_context = dict()\n    entry_context[\"VMRay.Job(val.JobID === obj.JobID)\"\
    ] = jobs_list\n    entry_context[\"VMRay.Sample(val.SampleID === obj.SampleID)\"\
    ] = samples_list\n    entry_context[\"VMRay.Submission(val.SubmissionID === obj.SubmissionID)\"\
    ] = submissions_list\n\n    table = {\n        \"Jobs ID\": [job.get(\"JobID\"\
    ) for job in jobs_list],\n        \"Samples ID\": [sample.get(\"SampleID\") for\
    \ sample in samples_list],\n        \"Submissions ID\": [\n            submission.get(\"\
    SubmissionID\") for submission in submissions_list\n        ],\n    }\n    human_readable\
    \ = tableToMarkdown(\n        \"File submitted to VMRay\",\n        t=table,\n\
    \        headers=[\"Jobs ID\", \"Samples ID\", \"Submissions ID\"],\n    )\n\n\
    \    return_outputs(readable_output=human_readable, outputs=entry_context, raw_response=raw_response)\n\
    \n\ndef get_analysis_command():\n    sample_id = demisto.args().get(\"sample_id\"\
    )\n    limit = demisto.args().get(\"limit\")\n\n    params = {\"_limit\": limit}\n\
    \    raw_response = get_analysis(sample_id, params)\n    data = raw_response.get(\"\
    data\")\n    entry_context = build_analysis_data(data)\n    humam_readable = json.dumps(entry_context,\
    \ indent=4)\n    return_outputs(humam_readable, entry_context, raw_response=raw_response)\n\
    \n\ndef get_analysis(sample, params=None):\n    suffix = \"analysis/sample/{}\"\
    .format(sample)\n    response = http_request(\"GET\", suffix, params=params)\n\
    \    return response\n\n\ndef get_submission_command():\n    submission_id = demisto.args().get(\"\
    submission_id\")\n    raw_response = get_submission(submission_id)\n    data =\
    \ raw_response.get(\"data\")\n    if data:\n        # Build entry\n        entry\
    \ = dict()\n        entry[\"IsFinished\"] = data.get(\"submission_finished\")\n\
    \        entry[\"HasErrors\"] = data.get(\"submission_has_errors\")\n        entry[\"\
    SubmissionID\"] = data.get(\"submission_id\")\n        entry[\"MD5\"] = data.get(\"\
    submission_sample_md5\")\n        entry[\"SHA1\"] = data.get(\"submission_sample_sha1\"\
    )\n        entry[\"SHA256\"] = data.get(\"submission_sample_sha256\")\n      \
    \  entry[\"SSDeep\"] = data.get(\"submission_sample_ssdeep\")\n        entry[\"\
    Severity\"] = SEVERITY_DICT.get(data.get(\"submission_severity\"))\n        entry[\"\
    SampleID\"] = data.get(\"submission_sample_id\")\n        scores = score_by_hash(entry)\n\
    \n        entry_context = {\n            \"VMRay.Submission(val.SubmissionID ===\
    \ obj.SubmissionID)\": entry,\n            outputPaths.get(\"dbotscore\"): scores,\n\
    \        }\n\n        human_readable = tableToMarkdown(\n            \"Submission\
    \ results from VMRay for ID {} with severity of {}\".format(\n               \
    \ submission_id, entry.get(\"Severity\", \"Unknown\")\n            ),\n      \
    \      entry,\n            headers=[\n                \"IsFinished\",\n      \
    \          \"Severity\",\n                \"HasErrors\",\n                \"MD5\"\
    ,\n                \"SHA1\",\n                \"SHA256\",\n                \"\
    SSDeep\",\n            ],\n        )\n\n        return_outputs(human_readable,\
    \ entry_context, raw_response=raw_response)\n    else:\n        return_outputs(\"\
    No submission found in VMRay for submission id: {}\".format(submission_id), {})\n\
    \n\ndef get_submission(submission_id):\n    \"\"\"\n\n    Args:\n        submission_id:\
    \ (str)\n\n    Returns:\n        dict: response.data\n    \"\"\"\n    suffix =\
    \ \"submission/{}\".format(submission_id)\n    response = http_request(\"GET\"\
    , url_suffix=suffix)\n    return response\n\n\ndef get_sample_command():\n   \
    \ sample_id = demisto.args().get(\"sample_id\")\n    raw_response = get_sample(sample_id)\n\
    \    data = raw_response.get(\"data\")\n\n    entry = dict()\n    entry[\"SampleID\"\
    ] = data.get(\"sample_id\")\n    entry[\"FileName\"] = data.get(\"sample_filename\"\
    )\n    entry[\"MD5\"] = data.get(\"sample_md5hash\")\n    entry[\"SHA1\"] = data.get(\"\
    sample_sha1hash\")\n    entry[\"SHA256\"] = data.get(\"sample_sha256hash\")\n\
    \    entry[\"SSDeep\"] = data.get(\"sample_ssdeephash\")\n    entry[\"Severity\"\
    ] = SEVERITY_DICT.get(data.get(\"sample_severity\"))\n    entry[\"Type\"] = data.get(\"\
    sample_type\")\n    entry[\"Created\"] = data.get(\"sample_created\")\n    entry[\"\
    Classification\"] = data.get(\"sample_classifications\")\n    scores = score_by_hash(entry)\n\
    \n    entry_context = {\n        \"VMRay.Sample(var.SampleID === obj.SampleID)\"\
    : entry,\n        outputPaths.get(\"dbotscore\"): scores,\n    }\n\n    human_readable\
    \ = tableToMarkdown(\n        \"Results for sample id: {} with severity {}\".format(\n\
    \            entry.get(\"SampleID\"), entry.get(\"Severity\")\n        ),\n  \
    \      entry,\n        headers=[\"Type\", \"MD5\", \"SHA1\", \"SHA256\", \"SSDeep\"\
    ],\n    )\n    return_outputs(human_readable, entry_context, raw_response=raw_response)\n\
    \n\ndef get_sample(sample_id):\n    \"\"\"building http request for get_sample_command\n\
    \n    Args:\n        sample_id: (str, int)\n\n    Returns:\n        dict: data\
    \ from response\n    \"\"\"\n    suffix = \"sample/{}\".format(sample_id)\n  \
    \  response = http_request(\"GET\", suffix)\n    return response\n\n\ndef get_job(job_id=None,\
    \ sample_id=None):\n    \"\"\"\n    Args:\n        sample_id:\n        job_id:\n\
    \    Returns:\n        dict of response, if not exists returns:\n        {\n \
    \           \"error_msg\": \"No such element\"\n            \"result\": \"error\"\
    \n        }\n    \"\"\"\n    suffix = \"job/{}\".format(job_id) if isinstance(job_id,\
    \ str) else \"job/sample/{}\".format(sample_id)\n    response = http_request(\"\
    GET\", suffix, ignore_errors=True)\n    return response\n\n\ndef get_job_command():\n\
    \    job_id = demisto.args().get(\"job_id\")\n    sample_id = demisto.args().get(\"\
    sample_id\")\n\n    vmray_id = job_id if job_id else sample_id\n    title = \"\
    job\" if job_id else \"sample\"\n\n    raw_response = get_job(job_id=job_id, sample_id=sample_id)\n\
    \    data = raw_response.get(\"data\")\n    if raw_response.get(\"result\") ==\
    \ \"error\" or not data:\n        entry = build_finished_job(job_id=job_id, sample_id=sample_id)\n\
    \        human_readable = \"#### Jobs for {} id {} is finished/not exists\".format(title,\
    \ vmray_id)\n    else:\n        entry = build_job_data(data)\n        sample =\
    \ entry[0] if isinstance(entry, list) else entry\n        human_readable = tableToMarkdown(\n\
    \            \"Job results for {} id: {}\".format(title, vmray_id),\n        \
    \    sample,\n            headers=[\"JobID\", \"SampleID\", \"VMName\", \"VMID\"\
    ],\n        )\n\n    entry_context = {\"VMRay.Job(val.JobID === obj.JobID && val.SampleID\
    \ === obj.SampleID)\": entry}\n    return_outputs(human_readable, entry_context,\
    \ raw_response=raw_response)\n\n\ndef get_threat_indicators(sample_id):\n    suffix\
    \ = \"sample/{}/threat_indicators\".format(sample_id)\n    response = http_request(\"\
    GET\", suffix).get(\"data\")\n    return response\n\n\ndef get_threat_indicators_command():\n\
    \    sample_id = demisto.args().get(\"sample_id\")\n    raw_response = get_threat_indicators(sample_id)\n\
    \    data = raw_response.get(\"threat_indicators\")\n\n    # Build Entry Context\n\
    \    if data and isinstance(data, list):\n        entry_context_list = list()\n\
    \        for indicator in data:\n            entry = dict()\n            entry[\"\
    AnalysisID\"] = indicator.get(\"analysis_ids\")\n            entry[\"Category\"\
    ] = indicator.get(\"category\")\n            entry[\"Classification\"] = indicator.get(\"\
    classifications\")\n            entry[\"ID\"] = indicator.get(\"id\")\n      \
    \      entry[\"Operation\"] = indicator.get(\"operation\")\n            entry_context_list.append(entry)\n\
    \n        human_readable = tableToMarkdown(\n            \"Threat indicators for\
    \ sample ID: {}. Showing first indicator:\".format(\n                sample_id\n\
    \            ),\n            entry_context_list[0],\n            headers=[\"AnalysisID\"\
    , \"Category\", \"Classification\", \"Operation\"],\n        )\n\n        entry_context\
    \ = {\"VMRay.ThreatIndicator(obj.ID === val.ID)\": entry_context_list}\n     \
    \   return_outputs(\n            human_readable,\n            entry_context,\n\
    \            raw_response={\n                \"threat_indicators\": data\n   \
    \         }\n        )\n    return_outputs(\n        \"No threat indicators for\
    \ sample ID: {}\".format(sample_id),\n        {},\n        raw_response=raw_response\n\
    \    )\n\n\ndef post_tags_to_analysis(analysis_id, tag):\n    suffix = \"analysis/{}/tag/{}\"\
    .format(analysis_id, tag)\n    response = http_request(\"POST\", suffix)\n   \
    \ return response\n\n\ndef post_tags_to_submission(submission_id, tag):\n    suffix\
    \ = \"submission/{}/tag/{}\".format(submission_id, tag)\n    response = http_request(\"\
    POST\", suffix)\n    return response\n\n\ndef post_tags():\n    analysis_id =\
    \ demisto.args().get(\"analysis_id\")\n    submission_id = demisto.args().get(\"\
    submission_id\")\n    tag = demisto.args().get(\"tag\")\n    if not submission_id\
    \ and not analysis_id:\n        return_error(\"No submission ID or analysis ID\
    \ has been provided\")\n    if analysis_id:\n        analysis_status = post_tags_to_analysis(analysis_id,\
    \ tag)\n        if analysis_status.get(\"result\") == \"ok\":\n            return_outputs(\n\
    \                \"Tags: {} has been added to analysis:\".format(tag, analysis_id),\n\
    \                {},\n                raw_response=analysis_status,\n        \
    \    )\n    if submission_id:\n        submission_status = post_tags_to_submission(submission_id,\
    \ tag)\n        if submission_status.get(\"result\") == \"ok\":\n            return_outputs(\n\
    \                \"Tags: {} has been added to submission:\".format(tag, submission_id),\n\
    \                {},\n                raw_response=submission_status,\n      \
    \      )\n\n\ndef delete_tags_from_analysis(analysis_id, tag):\n    suffix = \"\
    analysis/{}/tag/{}\".format(analysis_id, tag)\n    response = http_request(\"\
    DELETE\", suffix)\n    return response\n\n\ndef delete_tags_from_submission(submission_id,\
    \ tag):\n    suffix = \"submission/{}/tag/{}\".format(submission_id, tag)\n  \
    \  response = http_request(\"DELETE\", suffix)\n    return response\n\n\ndef delete_tags():\n\
    \    analysis_id = demisto.args().get(\"analysis_id\")\n    submission_id = demisto.args().get(\"\
    submission_id\")\n    tag = demisto.args().get(\"tags\")\n    if not submission_id\
    \ and not analysis_id:\n        return_error(\"No submission ID or analysis ID\
    \ has been provided\")\n    if submission_id:\n        submission_status = delete_tags_from_submission(submission_id,\
    \ tag)\n        if submission_status.get(\"result\") == \"ok\":\n            return_outputs(\n\
    \                \"Tags: {} has been added to submission:\".format(tag, submission_id),\n\
    \                {},\n                raw_response=submission_status,\n      \
    \      )\n    if analysis_id:\n        analysis_status = delete_tags_from_analysis(analysis_id,\
    \ tag)\n        if analysis_status.get(\"result\") == \"ok\":\n            return_outputs(\n\
    \                \"Tags: {} has been added to analysis:\".format(tag, analysis_id),\n\
    \                {},\n                raw_response=analysis_status,\n        \
    \    )\n\n\ndef get_iocs(sample_id):\n    suffix = \"sample/{}/iocs\".format(sample_id)\n\
    \    response = http_request(\"GET\", suffix)\n    return response\n\n\ndef get_iocs_command():\n\
    \    sample_id = demisto.args().get(\"sample_id\")\n    raw_response = get_iocs(sample_id)\n\
    \    data = raw_response.get(\"data\", {}).get(\"iocs\", {})\n\n    # Initialize\
    \ counters\n    iocs_size = 0\n    iocs_size_table = dict()\n\n    domains = data.get(\"\
    domains\")\n    domain_list = list()\n    if domains:\n        size = len(domains)\n\
    \        iocs_size_table[\"Domain\"] = size\n        iocs_size += size\n     \
    \   \n        for domain in domains:\n            entry = dict()\n           \
    \ entry[\"AnalysisID\"] = domain.get(\"analysis_ids\")\n            entry[\"Domain\"\
    ] = domain.get(\"domain\")\n            entry[\"ID\"] = domain.get(\"id\")\n \
    \           entry[\"Type\"] = domain.get(\"type\")\n            domain_list.append(entry)\n\
    \n    ips = data.get(\"ips\")\n    ip_list = list()\n    if ips:\n        size\
    \ = len(ips)\n        iocs_size_table[\"IP\"] = size\n        iocs_size += size\n\
    \        \n        for ip in ips:\n            entry = dict()\n            entry[\"\
    AnalysisID\"] = ip.get(\"analysis_ids\")\n            entry[\"IP\"] = ip.get(\"\
    ip_address\")\n            entry[\"ID\"] = ip.get(\"id\")\n            entry[\"\
    Type\"] = ip.get(\"type\")\n            ip_list.append(entry)\n\n    mutexes =\
    \ data.get(\"mutexes\")\n    mutex_list = list()\n    if mutexes:       \n   \
    \     size = len(mutexes)\n        iocs_size_table[\"Mutex\"] = size\n       \
    \ iocs_size += size\n        \n        for mutex in mutexes:\n            entry\
    \ = dict()\n            entry[\"AnalysisID\"] = mutex.get(\"analysis_ids\")\n\
    \            entry[\"Name\"] = mutex.get(\"mutex_name\")\n            entry[\"\
    Operation\"] = mutex.get(\"operations\")\n            entry[\"ID\"] = mutex.get(\"\
    id\")\n            entry[\"Type\"] = mutex.get(\"type\")\n            mutex_list.append(entry)\n\
    \n    registry = data.get(\"registry\")\n    registry_list = list()\n    if registry:\n\
    \        size = len(registry)\n        iocs_size_table[\"Registry\"] = size\n\
    \        iocs_size += size\n        \n        for reg in registry:\n         \
    \   entry = dict()\n            entry[\"AnalysisID\"] = reg.get(\"analysis_ids\"\
    )\n            entry[\"Name\"] = reg.get(\"reg_key_name\")\n            entry[\"\
    Operation\"] = reg.get(\"operations\")\n            entry[\"ID\"] = reg.get(\"\
    id\")\n            entry[\"Type\"] = reg.get(\"type\")\n            registry_list.append(entry)\n\
    \n    urls = data.get(\"urls\")\n    urls_list = list()\n    if urls:\n      \
    \  size = len(urls)\n        iocs_size_table[\"URL\"] = size\n        iocs_size\
    \ += size\n        for url in urls:\n            entry = dict()\n            entry[\"\
    AnalysisID\"] = url.get(\"analysis_ids\")\n            entry[\"URL\"] = url.get(\"\
    url\")\n            entry[\"Operation\"] = url.get(\"operations\")\n         \
    \   entry[\"ID\"] = url.get(\"id\")\n            entry[\"Type\"] = url.get(\"\
    type\")\n            urls_list.append(entry)\n\n    iocs = {\n        \"URL\"\
    : urls_list,\n        \"Mutex\": mutex_list,\n        \"Domain\": domain_list,\n\
    \        \"Registry\": registry_list,\n        \"IP\": ip_list\n    }\n\n    entry_context\
    \ = {\n        \"VMRay.Sample(val.SampleID === {}).IOC\".format(sample_id): iocs,\n\
    \    }\n\n    human_readable = tableToMarkdown(\n        \"Total of {} IOCs found\
    \ in VMRay by sample {}\".format(iocs_size, sample_id),\n        iocs_size_table,\n\
    \        headers=[\"URLs\", \"IPs\", \"Domains\", \"Mutexes\", \"Registry\"]\n\
    \    )\n    return_outputs(human_readable, entry_context, raw_response=raw_response)\n\
    \n\ntry:\n    COMMAND = demisto.command()\n    if COMMAND == \"test-module\":\n\
    \        # This is the call made when pressing the integration test button.\n\
    \        # demisto.results('ok')\n        test_module()\n    elif COMMAND in (\"\
    upload_sample\", \"vmray-upload-sample\", \"file\"):\n        upload_sample_command()\n\
    \    elif COMMAND == \"vmray-get-submission\":\n        get_submission_command()\n\
    \    elif COMMAND in (\"get_results\", \"vmray-get-analysis-by-sample\"):\n  \
    \      get_analysis_command()\n    elif COMMAND == \"vmray-get-sample\":\n   \
    \     get_sample_command()\n    elif COMMAND in (\"vmray-get-job-by-sample\",\
    \ \"get_job_sample\", \"vmray-get-job-by-id\"):\n        get_job_command()\n \
    \   elif COMMAND == \"vmray-get-threat-indicators\":\n        get_threat_indicators_command()\n\
    \    elif COMMAND == \"vmray-add-tag\":\n        post_tags()\n    elif COMMAND\
    \ == \"vmray-delete-tag\":\n        delete_tags()\n    elif COMMAND == \"vmray-get-iocs\"\
    :\n        get_iocs_command()\nexcept Exception as exc:\n    return_error(exc.message)"
  type: python
